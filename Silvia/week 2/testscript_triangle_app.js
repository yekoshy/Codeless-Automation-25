// test data: values generated by chatgtp

const testDataEqui = [
  [4, 4, 4],
  [7, 7, 7],
  [15, 15, 15],
  [49, 49, 49],
];

const testDataNAT = [
  [4, 4, 8],
  [6, 8, 15],
  [1, 2, 3],
  [3, 4, 7],
  [9, 14, 25],
];

const testDataScalene = [
  [5, 6, 7],
  [8, 10, 13],
  [7, 9, 11],
  [4, 6, 9],
  [3, 5, 7],
];

const testDataIso = [
  [5, 5, 6],
  [10, 10, 8],
  [7, 7, 5],
  [12, 12, 10],
  [9, 9, 4],
];

const testDataLarge = [
  { input: [49, 49, 49], output: "Equilateral" },
  { input: [49, 168, 168], output: "Isosceles" },
  { input: [1000, 1000, 1000], output: "Equilateral" },
];

const testDataVeryLarge = [
  { input: [1234567890, 1234567890, 1234567890], output: "Equilateral" },
  { input: [1234567890, 1234567890, 123456], output: "Isosceles" },
];

const testDataNan = [
  { input: [1, 1], output: "Error: Side 3 is missing" },
  { input: [4, -4, 4], output: "Error: Not a Triangle" },
  { input: [("a", 2, 3)], output: "Error: Side 1 is not a Number" },
  { input: [2, "b", 4], output: "Error: Side 2 is not a Number" },
  { input: [3, 4, "c"], output: "Error: Side 3 is not a Number" },
];

// GUI Messages - from manual testing
const validResults = ["Equilateral", "Scalene", "Isosceles"];
const errorMessages = [
  "Error: Not a Triangle",
  "Error: Side 1 is missing",
  "Error: Side 2 is missing",
  "Error: Side 3 is missing",
  "Error: Side 1 is not a Number",
  "Error: Side 2 is not a Number",
  "Error: Side 3 is not a Number",
];

var testData = [{ input: [4, -4, 4], output: "Error: Not a Triangle" }];

//function generate two-dimensional test set data

function generateTestSet(tcInput, tcOutput) {
  let testSet = [];
  for (let i = 0; i < tcInput.length; i++) {
    let testCase = { input: tcInput[i], output: tcOutput };
    testSet.push(testCase);
  }
  return testSet;
}

const testSetEqui = generateTestSet(testDataEqui, validResults[0]);
console.log(testSetEqui);
const testSetScalene = generateTestSet(testDataScalene, validResults[1]);
const testSetIso = generateTestSet(testDataIso, validResults[2]);
const testSetNaT = generateTestSet(testDataNAT, errorMessages[0]);

//my interface elements
// button
const buttonID = "identify-triangle-action"; // id of the button
// 3 input fields named side1, side2, side 3
// Result string div and p
const resultDisplayID = "triangle-type";
// canvas for visualisation

// timeout function
function timeoutCalled(myTimeout) {
  console.log("myTimeout");
}

//function to type in field, field identified by ID

function typeInField(fieldId, fieldData) {
  let side = document.getElementById(fieldId);
  console.log(document.getElementById(fieldId).value);
  side.value = fieldData;
  console.log(side.value);
  console.log(`Filled field ${fieldId} with ${fieldData}`);
  console.assert(
    side.value == fieldData,
    `Expected: Field ${fieldId} should be filled with ${fieldData}, Actual: ${side.value}`
  );
}

//function to click Button, identify button by id
function clickButton(buttonID) {
  document.getElementById(buttonID).click();
}

//function to insert three values, click button and evaluate result
function checkTriangle(testCase) {
  console.log("testcase = " + testCase);
  for (let j = 0; j < 3; j++) {
    inputData = testCase[j];
    //console.log("input data: " + inputData);
    let inputId = "side" + (j + 1);
    console.log(inputId);
    typeInField(inputId, inputData);
  }
  clickButton(buttonID);
}

//function to run a test case set

function testTestCase(testCaseSet) {
  console.log(testCaseSet);
  for (let k = 0; k < testCaseSet.length; k++) {
    let testcase = testCaseSet[k].input;
    //console.log(`Is input an array? ${Array.isArray(testCaseSet[k].input)}`);
    let expectedResult = testCaseSet[k].output;

    console.log(`k = ${k}, input ${testcase}, expected ${expectedResult}`);
    checkTriangle(testcase);
    //wait before calling assert
    setTimeout(timeoutCalled, 3000);
    console.assert(
      document.getElementById(resultDisplayID).innerHTML === expectedResult,
      `Expected: Result should be ${expectedResult}, Actual: ${
        document.getElementById(resultDisplayID).innerText
      }`
    );
  }
}

testTestCase(testDataLarge);
